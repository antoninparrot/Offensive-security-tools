from Crypto.PublicKey import RSA
from requests import get
import base64
from Crypto.Cipher import PKCS1_v1_5
from Crypto import Random

def egcd(a, b):
    x,y, u,v = 0,1, 1,0
    while a != 0:
        q, r = b//a, b%a
        m, n = x-u*q, y-v*q
        b,a, x,y, u,v = a,r, u,v, m,n
        gcd = b
    return gcd, x, y

def trouve(mot,phrase):
	#Return the list of indices of mot found in the phrase
	indices = []
	i = 0
	while(i < len(phrase)):
		if mot in phrase[i:]:
			indices.append(phrase[i:].index(mot) + i)
			i = indices[-1] + 1
		else:
			break
	return indices

def find_searched(page):
	indice1 = page.find('<input type="text" size=100 name="query" value="')
	indice2 = trouve('">',page)[18]
	return page[indice1+len('<input type="text" size=100 name="query" value="'):indice2]

def facteurs(N):
	url = "http://www.factordb.com/index.php?query=" + str(N)
	r = get(url)
	vals = trouve('<a href="index.php?id=',r.text)
	url1 = "http://www.factordb.com/index.php?id="+r.text[vals[1]+22:vals[1]+22+19]
	url2 = "http://www.factordb.com/index.php?id="+r.text[vals[2]+22:vals[2]+22+19]
	p = find_searched(get(url1).text)
	q = find_searched(get(url2).text)
	return int(p),int(q)

def public_to_private(clef_public):
	N = clef_public.n
	e = clef_public.e
	p,q = facteurs(N)
	phi = (p - 1) * (q - 1)
	_, d, _ = egcd(e, phi)
	key_params = (N,e,d,p,q)
	clef_prive = RSA.construct(key_params)
	return clef_prive

def decrypt_RSA(clef_prive,ciphertext):
	ciphertext = base64.b64decode(ciphertext)
	sentinel = Random.get_random_bytes(16)
	cipher = PKCS1_v1_5.new(clef_prive)
	message = cipher.decrypt(ciphertext, sentinel)
	return message

ciphertext = ""
clef_public = RSA.importKey(open("pubkey.pem","r").read())


clef_prive = public_to_private(clef_public)
message = decrypt_RSA(clef_prive,ciphertext)
print(message)